"""
한 마을에 모험가가 N명 있습니다. 모험가 길드에서는 N명의 모험가를 대상으로 "공포도"를 측정하는데, 
'공포도'가 높은 모험가는 쉽게 공포를 느껴 위험상황에서 대처할 능력이 떨어집니다.

모험가 길드장인 동빈이는 모험가 그룹을 안전하게 구성하고자, 공포도 X인 모험가는 반드시 X명 이상으로 구성한 
모험가 그룹에 차명해야 여행을 떠날 수 있도록 규정했습니다. 

동빈이는 최대 몇개의 모험가 그룹을 만들 수 잇는지 궁급합니다.  N명의 모험가에 대한 정보가 주어졋을 때 
여행을 떠날 수 있는 그룹 수의 최댓값을 구하는 프로그램을 작성하세요. 

예) 
N = 5 , [2,3,1,2,2]

이 경우 그룹 1에 공포도가 1,2,3인 모험가를 한명씩 넣고 그룹 2에 공포도가 2인 남은 두명을 넣게 되면
총 2개의 그룹을 만들 수 있습니다. 

또한 몇명의 모험가는 마을에 그대로 남아 잇어도 되기 때문에, 모든 모험가를 특정한 그룹에 넣을 필요는 없습니다. 

"""

def solution(arr): 
    arr = sorted(arr) # 그리디 적 풀이 1.
    group = [] 
    count = 0
    for i in arr:
        group.append(i)
        if i == len(group): # 그리디 적 풀이 2. 
            count +=1 
        
    return count 

print(solution([2,3,1,2,2]))

"""
앞에서 부터 공포도를 하나씩 확인하며, 현재 그룹에 포함된 모험가 수가 현재 확인하고 잇는 공포도 
보다 크거나 같다면 이를 그룹으로 설정 

이러한 방법을 이용하면 공포도가 오름차순으로 정렬되어 있는다는 점에서, 항상 최소한의 모험가의
수만 포함하여 그룹을 결성하게 됩니다. 

"""
# 이코테 
def solution2(arr):
    arr.sort()
    result = 0 # 총 그룹의 수 
    count = 0 # 현재 그룹에 포함된 모험가의 수 
    for i in arr:
        count +=1 
        if count >=i:
            result +=1 
            count = 0 
    return count 

print(solution2([2,3,1,2,2]))

# append가 숫자 늘려주는 것보단 느림 때문에 이코테 정답이 더 빠를 것임 
# cpp 에서는 파이썬 리스트 대신 vector을 사용 
